{ parameter
    (or (or (address %add_admin)
            (list %add_tokens
               (pair (or (address %fa12) (pair %fa2 (address %address) (nat %token_id)))
                     (bytes %symbol)
                     (nat %decimals))))
        (or (address %remove_admin)
            (list %remove_tokens
               (or (address %fa12) (pair %fa2 (address %address) (nat %token_id)))))) ;
  storage
    (pair (set %admins address)
          (big_map %tokens
             (or (address %fa12) (pair %fa2 (address %address) (nat %token_id)))
             (pair (bytes %symbol) (nat %decimals)))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DUP 2 ;
                 CAR ;
                 SENDER ;
                 MEM ;
                 NOT ;
                 IF { PUSH nat 401 ; FAILWITH } {} ;
                 DUP 2 ;
                 DIG 2 ;
                 CAR ;
                 DIG 2 ;
                 PUSH bool True ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 1 }
               { DUP 2 ;
                 CAR ;
                 SENDER ;
                 MEM ;
                 NOT ;
                 IF { PUSH nat 401 ; FAILWITH } {} ;
                 PAIR ;
                 LEFT (pair (set address) (big_map (or address (pair address nat)) (pair bytes nat))) ;
                 LOOP_LEFT
                   { UNPAIR ;
                     IF_CONS
                       { UNPAIR ;
                         DUP 4 ;
                         DIG 4 ;
                         CDR ;
                         DIG 3 ;
                         DIG 3 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 2 ;
                         SWAP ;
                         PAIR ;
                         LEFT (pair (set address) (big_map (or address (pair address nat)) (pair bytes nat))) }
                       { RIGHT
                           (pair (list (pair (or address (pair address nat)) bytes nat))
                                 (set address)
                                 (big_map (or address (pair address nat)) (pair bytes nat))) } } } }
           { IF_LEFT
               { DUP 2 ;
                 CAR ;
                 SENDER ;
                 MEM ;
                 NOT ;
                 IF { PUSH nat 401 ; FAILWITH } {} ;
                 PUSH nat 1 ;
                 DUP 3 ;
                 CAR ;
                 SIZE ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH nat 401 ; FAILWITH } {} ;
                 DUP 2 ;
                 DIG 2 ;
                 CAR ;
                 DIG 2 ;
                 PUSH bool False ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 1 }
               { DUP 2 ;
                 CAR ;
                 SENDER ;
                 MEM ;
                 NOT ;
                 IF { PUSH nat 401 ; FAILWITH } {} ;
                 PAIR ;
                 LEFT (pair (set address) (big_map (or address (pair address nat)) (pair bytes nat))) ;
                 LOOP_LEFT
                   { UNPAIR ;
                     IF_CONS
                       { DUP 3 ;
                         DIG 3 ;
                         CDR ;
                         NONE (pair bytes nat) ;
                         DIG 3 ;
                         UPDATE ;
                         UPDATE 2 ;
                         SWAP ;
                         PAIR ;
                         LEFT (pair (set address) (big_map (or address (pair address nat)) (pair bytes nat))) }
                       { RIGHT
                           (pair (list (or address (pair address nat)))
                                 (set address)
                                 (big_map (or address (pair address nat)) (pair bytes nat))) } } } } ;
         NIL operation ;
         PAIR } ;
  view "get_token_metadata"
       (or (address %fa12) (pair %fa2 (address %address) (nat %token_id)))
       (pair (bytes %symbol) (nat %decimals))
       { UNPAIR ;
         SWAP ;
         CDR ;
         SWAP ;
         GET ;
         IF_NONE { PUSH nat 100 ; FAILWITH } {} } }

